What is nodejs? And why are we using it?
- Node. js is not a programming language; it is a runtime environment allowing you to execute JavaScript code on the server side, outside a web 
  browser. Built on the V8 JavaScript engine from Chrome, Node. js compiles JavaScript into machine code for efficient execution. It will also allow
  us to use node packet management to install dependencies like chakra or react.And this will all come in one very handy and powerful bundle called NodeJS.
  We have node and npm which comes with node, is installed on your machine.

What is git?
- Git is version controlling and will help us to synchronize with GitHub our code. Very handy stuff.Absolutely necessary if you want to be a developer.
  Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

-Note: npm init -y: by using this cmnd we are setting up our node and npm environment.
-package.json(inside the src): this is our information holder for our frontend.
-package.json(outside the src): this is our information holder for our backend.

Note: In db.js
1. we created ourself a run command with the npm start server, which goes to this entry point, which is the index.js in the server folder.
2. Here at the top we can describe a type of how we importing modules.And this will be with the name module.
3. In Json or in the db.S, we can create a function which will allow us to create a connection to our database.
   we can create a dot env file.
   And we will fill this with the mongo Uri later on.So actually what we can do here is uppercase.And we can leave for now here string.So this string here we will get this 
   from our MongoDB account from our database.And we will paste it in to make a connection.
4. In db.js we start creating a function to connect to our database.
5. if u want to go one directory back like from client to ACADEMIC_PRJCT use cmnd like : cd ..
6. bcryptjs: this will encrypt our data.
7. concurrently: which will allow us to run the back end at the front end simultaneously.
8. cors: for security.
9. dotenv: this allows us to create this dot env file.
10. express: because we are creating an express server.
11. express-async-handler: this allows us to handle the errors of our backend a bit more efficient.
12. jsonwebtoken: For identity authentication.
13. mongoose: mongoose is out ORM, so our objec relationship manager or mapper. This will allow us to create data to the database and read from it.
14. nodemailer: we want to send emails for verification.
15. stripe: we need stripe later on for credit card payments.
16. so this was the total cmnd: "npm install bcryptjs concurrently cors dotenv express express-async-handler jsonwebtoken jwt-decode mongoose nodemailer stripe"

Note: In index.js
1. dotenv.config(): we are initializing it. The documentation of Dotenv says that u should initialize that as soon as possible.
2. import cors from 'cors': this will allow us to talk in our browser to different ports. By default this is prohibited.
3. npm run server
  Error: Invalid scheme, expected connection string to start with "mongodb://" or "mongodb+srv://"
  Server runs on port 5000
  - so we are getting error coz we haven't set up our MongoDB account yet.

4. Object mapper: Which knows how we define our product data and our product object.

-What is Redux?
 we will set up Redux, which helps us to manage our data on the client side.

Note: In package.json there is a term called "concurrently" so basically the use of concurrently is we want to start our front end 
with the help of backend.it means we want to run the backend first then the frontend run automatically so that we will not get any error.

-Why do we need Redux?
So for example, if you passing down data and you changing the stock or the amounts, it might be that the product cart is changing the amount, but the product screen doesn't know.
And if the product screen talks to the database, things can get very messy and the data would be displayed on the screen incorrectly.So this is where Redux comes in.
It's probably the best sidekick of react, because Redux is our front end database taking care of the state of the data.

Note: And Redux has a reducer which will update our components as soon as something changes.We have to combine reducers method here for it, which takes an object.
And this is where we can combine later on our reducers for products, orders, users or whatever we have handling data in our database or in our front ends.

Note: In index.js, The strict mode is for developing and it gives you more information. If something goes wrong in your application, you can keep this.

Note: cd client: to install something in the frontend means in the client folder.
      cd ..:  to comeback in the backend to run the app(npm run app).
      for email verification first we start the server by using cmnd(npm run server);